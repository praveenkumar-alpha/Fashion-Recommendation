{"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28121,"status":"ok","timestamp":1616310068734,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"ZtNUF96hYvUL","outputId":"6bd7bcb3-db69-4a80-cc84-ae0fc6f07e38"},"outputs":[{"name":"stdout","output_type":"stream","text":["Collecting surprise\n","  Downloading https://files.pythonhosted.org/packages/61/de/e5cba8682201fcf9c3719a6fdda95693468ed061945493dea2dd37c5618b/surprise-0.1-py2.py3-none-any.whl\n","Collecting scikit-surprise\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/97/37/5d334adaf5ddd65da99fc65f6507e0e4599d092ba048f4302fe8775619e8/scikit-surprise-1.1.1.tar.gz (11.8MB)\n","\u001b[K     |████████████████████████████████| 11.8MB 258kB/s \n","\u001b[?25hRequirement already satisfied: joblib\u003e=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise-\u003esurprise) (1.0.1)\n","Requirement already satisfied: numpy\u003e=1.11.2 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise-\u003esurprise) (1.19.5)\n","Requirement already satisfied: scipy\u003e=1.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise-\u003esurprise) (1.4.1)\n","Requirement already satisfied: six\u003e=1.10.0 in /usr/local/lib/python3.7/dist-packages (from scikit-surprise-\u003esurprise) (1.15.0)\n","Building wheels for collected packages: scikit-surprise\n","  Building wheel for scikit-surprise (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for scikit-surprise: filename=scikit_surprise-1.1.1-cp37-cp37m-linux_x86_64.whl size=1617539 sha256=842555fd3e16665ea4a924ffb63c972010c423d165091209a6dd3b304d57cb8e\n","  Stored in directory: /root/.cache/pip/wheels/78/9c/3d/41b419c9d2aff5b6e2b4c0fc8d25c538202834058f9ed110d0\n","Successfully built scikit-surprise\n","Installing collected packages: scikit-surprise, surprise\n","Successfully installed scikit-surprise-1.1.1 surprise-0.1\n"]}],"source":["pip install surprise"]},{"cell_type":"code","execution_count":3,"metadata":{"executionInfo":{"elapsed":1873,"status":"ok","timestamp":1616310077141,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"hg_DIw8HY-Ll"},"outputs":[],"source":["from surprise import Dataset\n","from surprise import Reader\n","import pandas as pd\n","import numpy as np\n","import os, io\n","from surprise import SVD\n","from surprise import accuracy\n","import csv"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":7495,"status":"ok","timestamp":1616310085196,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"U-DXXAzmZbd2"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","data = pd.read_json('http://deepx.ucsd.edu/public/jmcauley/renttherunway/renttherunway_final_data.json.gz', lines=True)\n","train, test = train_test_split(data, test_size=0.2)"]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":1975,"status":"ok","timestamp":1616310088125,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"lFObdaOWZgOX"},"outputs":[],"source":["# Exception Handeling for Data Sorting in pandas\n","pd.options.mode.chained_assignment = None"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":883,"status":"ok","timestamp":1616310091461,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"ps8u3Pkja1CM"},"outputs":[],"source":["def preprocessAge(data):\n","  bins = pd.IntervalIndex.from_tuples([(5, 15), (15, 30), (30, 50),(50,65),(65,100)])\n","  x = pd.cut(data['age'].to_list(), bins)\n","  x.categories = ['1','2','3','4','5']\n","  data['age_bins']  = x\n","  age_Preprocessed_data = data[~data['age_bins'].isnull()]\n","  # print ('{0} rows got dropped after age preprocessing'.format(str(data.shape[0] - age_Preprocessed_data.shape[0])))\n","  return age_Preprocessed_data"]},{"cell_type":"code","execution_count":7,"metadata":{"executionInfo":{"elapsed":836,"status":"ok","timestamp":1616310095364,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"QZB6pqP0a45o"},"outputs":[],"source":["def preprocessBustsize(age_Preprocessed_data):\n","  data_bust_size_not_null = age_Preprocessed_data[~age_Preprocessed_data['bust size'].isnull()]\n","  data_bust_size_not_null['bust size'] = data_bust_size_not_null['bust size'].apply(lambda x : (int(x[:2]), x[2:]))\n","  data_bust_size_not_null.shape\n","  data_bust_size_not_null[['bust Size1', 'bust']] = pd.DataFrame(data_bust_size_not_null['bust size'].tolist(), index=data_bust_size_not_null.index)\n","  bustDict = {'a': 1, 'aa': 1, 'b': 2, 'c': 3, 'd': 4, \n","            'd+': 5, 'dd': 5, 'ddd/e': 6,\n","           'f':7 , 'g': 8, 'h': 9, 'i': 10, 'j': 11}\n","  data_bust_size_not_null['bust1'] = data_bust_size_not_null['bust'].map(bustDict)\n","# Calculating model of bust size based on age grp.\n","  def funct(df):\n","    return df.mode()\n","  x = data_bust_size_not_null[['age_bins','bust Size1','bust1']].groupby('age_bins').apply(funct)\n","  x.reset_index(inplace= True, drop = True)\n","  data_bust_size_null = age_Preprocessed_data[age_Preprocessed_data['bust size'].isnull()]\n","  data_bust_size_null = pd.merge(data_bust_size_null, x, how ='left', left_on = 'age_bins', right_on = 'age_bins')\n","  data_bust_size_cleansed = data_bust_size_not_null.append(data_bust_size_null)\n","  return data_bust_size_cleansed"]},{"cell_type":"code","execution_count":8,"metadata":{"executionInfo":{"elapsed":859,"status":"ok","timestamp":1616310097207,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"GzD_QfH-a9D2"},"outputs":[],"source":["def preprocessHeight(data_bust_size_cleansed):\n","  data_bust_size_cleansed['heightCM'] = data_bust_size_cleansed['height'].apply(lambda x : (int(x.split(\"\\'\")[0]) * 30.48) + (int(x.split(\"\\'\")[1][:-1]) * 2.54) \n","                                                        if type(x) == str else x)\n","  data_bust_size_cleansed['heightCM'].fillna((data_bust_size_cleansed['heightCM'].mean()), inplace=True)\n","  return data_bust_size_cleansed"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":828,"status":"ok","timestamp":1616310113648,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"DiicihQmbAii"},"outputs":[],"source":["def preprocessWeight(data_bust_size_cleansed):\n","  data_bust_size_cleansed['weightLbs'] = data_bust_size_cleansed['weight'].apply(lambda x : int(x[:-3])                                                        if type(x) == str else x)\n","  data_bust_size_cleansed['weightLbs'].fillna((data_bust_size_cleansed['weightLbs'].mean()), inplace=True)\n","  return data_bust_size_cleansed"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":898,"status":"ok","timestamp":1616310115294,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"3dy9Tn4tbDg-"},"outputs":[],"source":["def preprocessRentedFor(data_bust_size_cleansed):\n","  data_bust_size_cleansed['rented for'].fillna('other', inplace=True)\n","  return data_bust_size_cleansed"]},{"cell_type":"code","execution_count":11,"metadata":{"executionInfo":{"elapsed":588,"status":"ok","timestamp":1616310116463,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"S4gX0yDebHHo"},"outputs":[],"source":["def preprocessBodytype(data_bust_size_cleansed):\n","  # Calculating model of body type based on Bust Size.\n","  data_body_type_not_null = data_bust_size_cleansed[~data_bust_size_cleansed['body type'].isnull()]\n","  def func(df):\n","    return df.mode()\n","  x = data_body_type_not_null[['bust Size1','body type']].groupby('bust Size1').apply(func)\n","  x.reset_index(inplace= True, drop = True)\n","  # print(x)\n","  data_body_type_null = data_bust_size_cleansed[data_bust_size_cleansed['body type'].isnull()]\n","  data_body_type_null = pd.merge(data_body_type_null, x, how ='left', left_on = 'bust Size1', right_on = 'bust Size1')\n","  # print(data_body_type_null)\n","  data_body_type_cleansed = data_body_type_not_null.append(data_body_type_null,sort=True)\n","  # print(data_body_type_cleansed)\n","  data_body_type_cleansed['body type'].fillna(data_body_type_cleansed['body type_y'], inplace=True)\n","  del data_body_type_cleansed['body type_x']\n","  del data_body_type_cleansed['body type_y']\n","  return data_body_type_cleansed"]},{"cell_type":"code","execution_count":12,"metadata":{"executionInfo":{"elapsed":596,"status":"ok","timestamp":1616310117881,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"MD7WtLxNbJ37"},"outputs":[],"source":["def createFinalDataframe(cleansedData):\n","  final_df=cleansedData.copy()\n","  final_df=final_df.drop(['rented for','rating','review_date','category','age_bins','bust','bust size','fit','height','item_id','review_summary','user_id','weight','review_text'],axis=1)\n","  cleanup_nums = {\"body type\":     {\"hourglass\": 1, \"straight \u0026 narrow\": 2, \"pear\": 3,\"athletic\": 4, \"full bust\": 5,\"petite\": 6, \"apple\": 7}}\n","  final_df.replace(cleanup_nums, inplace=True)\n","  return final_df"]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":819,"status":"ok","timestamp":1616310119625,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"Wdej6thwbNJy"},"outputs":[],"source":["def createFinalTestDataframe(cleansedData):\n","  final_df=cleansedData.copy()\n","  final_df=final_df.drop(['rating','review_date','category','age_bins','bust','bust size','fit','height','item_id','review_summary','weight','review_text'],axis=1)\n","  cleanup_nums = {\"body type\":     {\"hourglass\": 1, \"straight \u0026 narrow\": 2, \"pear\": 3,\"athletic\": 4, \"full bust\": 5,\"petite\": 6, \"apple\": 7}}\n","  final_df.replace(cleanup_nums, inplace=True)\n","  return final_df"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":3242,"status":"ok","timestamp":1616310123374,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"TWsFOpQ-bQAY"},"outputs":[],"source":["age_Preprocessed_data=preprocessAge(train)\n","data_bust_size_cleansed=preprocessBustsize(age_Preprocessed_data)\n","data_bust_size_cleansed=preprocessHeight(data_bust_size_cleansed)\n","data_bust_size_cleansed=preprocessWeight(data_bust_size_cleansed)\n","data_bust_size_cleansed=preprocessRentedFor(data_bust_size_cleansed)\n","cleansedData=preprocessBodytype(data_bust_size_cleansed)\n","final_df=createFinalDataframe(cleansedData)"]},{"cell_type":"code","execution_count":15,"metadata":{"executionInfo":{"elapsed":1215,"status":"ok","timestamp":1616310129606,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"whT_2egzbT0H"},"outputs":[],"source":["feature_names = ['age', 'bust Size1','bust1','size','heightCM','weightLbs']\n","X = final_df[feature_names]\n","y = final_df['body type']\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=0)"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10971,"status":"ok","timestamp":1616310141521,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"oWbfB-sYbYbx","outputId":"767b3a52-79cb-472e-9859-9558290b82d3"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of Logistic regression classifier on training set: 0.41\n","Accuracy of Logistic regression classifier on test set: 0.41\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"]}],"source":["from sklearn.linear_model import LogisticRegression\n","logreg = LogisticRegression()\n","logreg.fit(X_train, y_train)\n","print('Accuracy of Logistic regression classifier on training set: {:.2f}'\n","     .format(logreg.score(X_train, y_train)))\n","print('Accuracy of Logistic regression classifier on test set: {:.2f}'\n","     .format(logreg.score(X_test, y_test)))"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7780,"status":"ok","timestamp":1616310151597,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"Yri5Oh4Abdq6","outputId":"e60d4713-4818-42d4-9b22-e7ce147acd2c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of K-NN classifier on training set: 0.64\n","Accuracy of K-NN classifier on test set: 0.50\n"]}],"source":["from sklearn.neighbors import KNeighborsClassifier\n","knn = KNeighborsClassifier()\n","knn.fit(X_train, y_train)\n","print('Accuracy of K-NN classifier on training set: {:.2f}'\n","     .format(knn.score(X_train, y_train)))\n","print('Accuracy of K-NN classifier on test set: {:.2f}'\n","     .format(knn.score(X_test, y_test)))"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17678,"status":"ok","timestamp":1616310182308,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"0TBBoc5MbqHB","outputId":"7fd6b67d-a4ef-4fd5-c735-cca071dedd5d"},"outputs":[{"name":"stdout","output_type":"stream","text":["Accuracy of Random forest classifier on training set: 0.89\n","Accuracy of Random forest classifier on test set: 0.57\n"]}],"source":["from sklearn.ensemble import RandomForestClassifier\n","model = RandomForestClassifier(n_estimators=100, \n","                               bootstrap = True,\n","                               max_features = 'sqrt')\n","model.fit(X_train, y_train)\n","print('Accuracy of Random forest classifier on training set: {:.2f}'\n","     .format(model.score(X_train, y_train)))\n","print('Accuracy of Random forest classifier on test set: {:.2f}'\n","     .format(model.score(X_test, y_test)))"]},{"cell_type":"code","execution_count":19,"metadata":{"executionInfo":{"elapsed":1284,"status":"ok","timestamp":1616310186437,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"QokpVk1fbufv"},"outputs":[],"source":["age_Preprocessed_testdata=preprocessAge(test)\n","testdata_bust_size_cleansed=preprocessBustsize(age_Preprocessed_testdata)\n","testdata_bust_size_cleansed=preprocessHeight(testdata_bust_size_cleansed)\n","testdata_bust_size_cleansed=preprocessWeight(testdata_bust_size_cleansed)\n","testdata_bust_size_cleansed=preprocessRentedFor(testdata_bust_size_cleansed)\n","cleansedTestData=preprocessBodytype(testdata_bust_size_cleansed)\n","final_test_df=createFinalTestDataframe(cleansedTestData)"]},{"cell_type":"code","execution_count":20,"metadata":{"executionInfo":{"elapsed":857,"status":"ok","timestamp":1616310188403,"user":{"displayName":"Praveen Kumar","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgD5mNJzIL0OVCMq1VcG7FGJjQX7BKYToqmIxgezQ=s64","userId":"11123490704126783768"},"user_tz":-330},"id":"uyT7zx8Kbz4I"},"outputs":[],"source":["\n","feature_names = ['age', 'bust Size1','bust1','size','heightCM','weightLbs','rented for','user_id']\n","testdata = final_test_df[feature_names]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"Sf77YySeb2xr"},"outputs":[{"name":"stdout","output_type":"stream","text":["Predicted body type: ['athletic']\n","      item_id rating\n","0     2884139     10\n","1337   152836     10\n","1350  1869763     10\n","1349   405907     10\n","1348  2291737     10\n","...       ...    ...\n","1282  2824638     10\n","1281  1226293     10\n","1280   585830     10\n","1279   756819     10\n","1278   180014     10\n","\n","[75 rows x 2 columns]\n","Predicted body type: ['petite']\n","     item_id rating\n","0    1832871     10\n","692   263699     10\n","694   139086     10\n","695  1205016     10\n","696   241759     10\n","..       ...    ...\n","762   755371     10\n","763   153475     10\n","764   937638     10\n","765   903647     10\n","766   125424     10\n","\n","[75 rows x 2 columns]\n","Predicted body type: ['pear']\n","      item_id rating\n","0      197170     10\n","993    174086     10\n","1002   131117     10\n","1001  1687082     10\n","1000   134393     10\n","...       ...    ...\n","957   1207456     10\n","958    145906     10\n","959    866304     10\n","978   1390827     10\n","977    174086     10\n","\n","[75 rows x 2 columns]\n","Predicted body type: ['petite']\n","       item_id     rating\n","157  1459539.0  10.000000\n","805   916639.0  10.000000\n","141   913691.0  10.000000\n","500  1316534.0  10.000000\n","552   848848.0  10.000000\n","..         ...        ...\n","723   313568.0   9.871710\n","476   145417.0   9.871581\n","494   174391.0   9.869127\n","627  1949394.0   9.868809\n","324  1875650.0   9.867965\n","\n","[75 rows x 2 columns]\n","Predicted body type: ['hourglass']\n","      item_id rating\n","0     1415952     10\n","1769  1210197     10\n","1771  1522253     10\n","1772   127495     10\n","1773  1650899     10\n","...       ...    ...\n","1797  1355618     10\n","1798  2463317     10\n","1799  1263144     10\n","1800   654681     10\n","1801   691861     10\n","\n","[75 rows x 2 columns]\n"]}],"source":[" for i in range(5):#len(testdata)\n","    age = testdata.iloc[i,0]\n","    bustSize1 = testdata.iloc[i,1]\n","    bust1 = testdata.iloc[i,2]\n","    size = testdata.iloc[i,3]\n","    heightCM = testdata.iloc[i,4]\n","    weightLbs = testdata.iloc[i,5]\n","    \n","    xnew=[[age,bustSize1,bust1,size,heightCM,weightLbs]]\n","    bodytypenumber=model.predict(xnew)\n","    #print(\"Predicted body type:\",bodytypenumber)\n","    \n","    bodytypearray=[\"NaN\",\"hourglass\", \"straight \u0026 narrow\", \"pear\",\"athletic\", \"full bust\",\"petite\", \"apple\"]\n","    bodytype=np.asanyarray(bodytypearray)[bodytypenumber]\n","    print(\"Predicted body type:\",bodytype)\n","    \n","    cluster_df=cleansedData.copy()\n","    groupedbybodytype = cluster_df.groupby('body type')\n","    for name,group in groupedbybodytype:\n","      if(bodytype==name):\n","        #print(name)\n","        #print(group)\n","        grouped_df=group.copy()\n","    rentedFor=testdata.iloc[i,6]\n","    \n","    groupedbybodytype = grouped_df.groupby('rented for')\n","    for name,group in groupedbybodytype:\n","      if(rentedFor==name):\n","        #print(name)\n","        #print(group)\n","        cf_df=group.copy()\n","    cf_df=cf_df[['user_id','item_id','rating']].copy()\n","    \n","    reader = Reader(rating_scale=(1,10))\n","    traindata=Dataset.load_from_df(cf_df,reader)\n","    trainingSet = traindata.build_full_trainset()\n","    \n","    svdAlgo = SVD(n_factors=200,n_epochs=50)\n","    svdAlgo.fit(trainingSet)\n","    \n","    itemid=cf_df['item_id'].unique()\n","    ratingOutput = pd.DataFrame(columns=['item_id', 'rating']) #Create a blank df with 2 columns at first and then append data\n","    \n","    for i in range(len(itemid)):\n","        user=cf_df.iloc[i,0] #User_id\n","        item=cf_df.iloc[i,1] #Item_id\n","        output=svdAlgo.predict(user,item,r_ui=None,clip=True,verbose=False)\n","        ratingOutput = ratingOutput.append({'item_id': item, 'rating': output.est}, ignore_index=True)\n","        \n","    ratingOutput=ratingOutput.sort_values('rating',ascending=False)\n","    outputdf=ratingOutput.head(75).copy()\n","    print(outputdf)\n","    #print(\"Top 10 recommended items with their predicted ratings:\")\n","    #outputdf.head()\n","    rawdf = pd.read_json ('http://deepx.ucsd.edu/public/jmcauley/renttherunway/renttherunway_final_data.json.gz',lines=True)\n","    #itemID=int(outputdf['item_id'].iloc[0])\n","    #print(\"Recommended itemID:\",itemID)\n","    #finaldf = (rawdf[rawdf['item_id']==itemID].iloc[0])\n","    #print(\"Recommended category:\",finaldf['category'])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"08Rjjbvwb72Z"},"outputs":[],"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"authorship_tag":"ABX9TyN7Udk+KnziqtzQnF774iEt","name":"Final_rec_engine","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}